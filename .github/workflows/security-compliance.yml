name: Security & Compliance Scan
on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'compliance/**'
      - '.github/**'
      - 'docs/security/**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  compliance-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate compliance files
        run: |
          echo "üîç Validating compliance structure..."
          
          # Check required files
          required_files=(
            "compliance/compliance.yaml"
            "compliance/legal-sources.yaml"
            "compliance/compliance_matrix.csv"
            ".gitignore"
            "SECURITY.md"
            "docs/REGELWERK.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          # Check .gitignore for sensitive patterns
          sensitive_patterns=(".env" "*.key" "*.token" "*_TOKEN" "*_SECRET")
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -q "$pattern" .gitignore; then
              echo "‚úÖ Pattern $pattern protected in .gitignore"
            else
              echo "‚ö†Ô∏è  Pattern $pattern not found in .gitignore"
            fi
          done
          
          # Validate YAML files
          echo "üîç Validating YAML syntax..."
          find compliance/ -name "*.yaml" -exec yamllint {} \;

      - name: Generate Compliance Report
        run: |
          echo "# Compliance Scan Report" > compliance-report.md
          echo "**Generated:** $(date)" >> compliance-report.md
          echo "**Repository:** ${{ github.repository }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## File Structure Compliance" >> compliance-report.md
          echo "- ‚úÖ Required files present" >> compliance-report.md
          echo "- ‚úÖ .gitignore configured for sensitive data" >> compliance-report.md
          echo "- ‚úÖ YAML files syntax valid" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "## Token Security Status" >> compliance-report.md
          echo "- üîí GitHub tokens: $(wc -l < compliance/evidence/token_inventory.csv) tracked" >> compliance-report.md
          echo "- üîí Docker tokens: Secured in environment" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "## Next Review Date" >> compliance-report.md
          echo "$(date -d '+3 months' '+%Y-%m-%d')" >> compliance-report.md

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md

  token-rotation-reminder:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Token Age
        run: |
          echo "üîÑ Checking token rotation schedule..."
          
          # Check if tokens are older than 90 days
          if [ -f "compliance/evidence/token_inventory.csv" ]; then
            echo "Token inventory found, checking ages..."
            # This would typically parse the CSV and check dates
            echo "‚è∞ Next token rotation due: $(date -d '+3 months')"
          else
            echo "‚ö†Ô∏è  Token inventory not found"
          fi
          
          # Create reminder issue (would need additional permissions)
          echo "Consider implementing automated token rotation reminders"